**What is Node?**
- Node is an environment in which you can run JavaScript code "Outside the web browser".
- Node be like ‚Äì "Hey y'all, you give your JS code to me and I'll run it üòé". It uses Google's V8 Engine to convert the JavaScript code to Machine Code.

**What can we do with node js?**
- Create CLI (command line interfaces)
- Create video player
- Create a game.
- **Create a HTTP Server**

**What is HTTP Server?**
- Hyper Text transfer Protocol
- The HTTP or Hypertext Transfer Protocol is an application layer protocol that is used to virtually transmit files and other data on the World Wide Web, whether they‚Äôre HTML files, image files, query results, or anything else.

  In simpler words,

  the HTTP is a universally-spoken language with a simple grammar that ‚Äútranslates‚Äù the communication between the client and the server by specifying how the information must be requested and how the responses are formed.

**Express Framework:**
    - **Purpose:** Express is a web application framework for Node.js, designed to simplify the process of building web applications and APIs.
    - **Routing:** Express provides a powerful routing mechanism that allows you to define how your application responds to different HTTP requests (e.g., GET, POST).

**HTTP Methods:**
    - **GET:** Used to retrieve data from the server. Typically used for reading information.
    - **POST:** Used to submit data to the server. Often used for creating or updating resources.
    - **Other Methods (PUT, DELETE, etc.):** Used for various purposes, such as updating or deleting resources.

**Routes:**
    - **Definition:** Routes define the paths in your application and the HTTP methods they respond to.
    - **Parameters:** Routes can have parameters that allow dynamic handling of different values.

**Request and Response Objects:**
    - **Request (`req`):** Represents the incoming HTTP request from the client. Contains information about the request, such as parameters, headers, and body.
    - **Response (`res`):** Represents the outgoing HTTP response to be sent back to the client. Allows you to send data, set headers, and more.

**Listening and Ports:**
    - **Server Creation:** After defining routes and middleware, the Express application needs to be "listened" to for incoming requests.
    - **Port:** The server listens on a specific port (e.g., 3000) for incoming HTTP requests.








Resourses
- https://www.freecodecamp.org/news/get-started-with-nodejs/#what-is-node
- https://medium.com/@gabriellamedas/the-http-server-explained-c41380307917
- https://www.freecodecamp.org/news/express-explained-with-examples-installation-routing-middleware-and-more/